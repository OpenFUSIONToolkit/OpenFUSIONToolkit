name: CI Build

on:
  push:
    branches:
      - main
      - ci_debug
  pull_request:
    types: [opened, reopened, synchronize]
  
jobs:
  build:
    name: ${{ format('{0} ({1})', matrix.os, matrix.parallel) }}
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.os.cc }}
      CXX: ${{ matrix.os.cxx }}
      FC: ${{ matrix.os.fc }}
      OMP_NUM_THREADS: 2
    
    strategy:
      fail-fast: false
      matrix:
        parallel: ["openmp", "mpich", "openmpi"]
        os:
          - ubuntu-22.04
            cc: "gcc-12",
            cxx: "g++-12",
            fc: "gfortran-12",
            python: "python3"
          - ubuntu-24.04
            cc: "gcc-14",
            cxx: "g++-14",
            fc: "gfortran-14",
            python: "python3"
          - macos-13
            cc: "gcc-12",
            cxx: "g++-12",
            fc: "gfortran-12",
            python: "python3.12",
            xcode_path: "/Applications/Xcode_14.2.app/Contents/Developer"
          - macos-14
            cc: "gcc-13",
            cxx: "g++-13",
            fc: "gfortran-13",
            python: "python3.12",
            xcode_path: "/Applications/Xcode_15.4.app/Contents/Developer"
        exclude:
          - parallel: "openmpi"
            os: macos-14

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Get OS version (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: lsb_release -d

    - name: Get OS version (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        sw_vers -productVersion
        pkgutil --pkg-info=com.apple.pkg.CLTools_Executables
        sudo xcode-select -s ${{ matrix.os.xcode_path }}
        xcode-select -p

    - name: Check compilers
      run: |
        $CC --version
        $CXX --version
        $FC --version

    - name: Install prerequisites (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        ${{ matrix.os.python }} -m venv ${{ github.workspace }}/oft_venv
        source ${{ github.workspace }}/oft_venv/bin/activate
        python -m pip install pytest numpy scipy h5py triangle
    
    - name: Install prerequisites (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install pmix
        ${{ matrix.os.python }} -m venv ${{ github.workspace }}/oft_venv
        source ${{ github.workspace }}/oft_venv/bin/activate
        python -m pip install pytest numpy scipy h5py

    - name: Cache external libraries
      id: cache-ext-libs
      uses: actions/cache@v4
      with:
        path: libs
        key: ${{ matrix.os }}-build-${{ matrix.parallel }}-${{ hashFiles('src/utilities/build_libs.py') }}

    - name: Create build dir
      if: ${{ steps.cache-ext-libs.outputs.cache-hit != 'true' }}
      run: mkdir libs

    - name: Build external (OpenMP)
      if: ${{ matrix.parallel == 'openmp' }}
      shell: bash
      timeout-minutes: 30
      working-directory: libs
      run: >
        ${{ matrix.os.python }} ../src/utilities/build_libs.py --no_dl_progress --nthread=3 --ref_blas
        --build_umfpack=1 --build_superlu=1 --build_arpack=1 --oft_build_tests=1
    
    - name: Build external (MPICH+OpenMP)
      if: ${{ matrix.parallel == 'mpich' }}
      shell: bash
      timeout-minutes: 60
      working-directory: libs
      run: >
        ${{ matrix.os.python }} ../src/utilities/build_libs.py --no_dl_progress --nthread=3 --ref_blas
        --build_umfpack=1 --build_superlu=1 --build_superlu_dist=1 --build_arpack=1 --oft_build_tests=1
        --build_mpich=1

    - name: Build external (OpenMPI+OpenMP)
      if: ${{ matrix.parallel == 'openmpi' }}
      shell: bash
      timeout-minutes: 60
      working-directory: libs
      run: >
        ${{ matrix.os.python }} ../src/utilities/build_libs.py --no_dl_progress --nthread=3 --ref_blas
        --build_umfpack=1 --build_superlu=1 --build_superlu_dist=1 --build_arpack=1 --oft_build_tests=1
        --build_openmpi=1

    - name: Upload library failure log
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: Library_failure_log-${{ matrix.os }}_${{ matrix.parallel }}
        path: libs/build/build_error.log
    
    - name: Remove external build directory
      shell: bash
      working-directory: libs
      run: rm -rf build

    - name: Configure OFT
      shell: bash
      working-directory: libs
      run: |
        source ${{ github.workspace }}/oft_venv/bin/activate
        bash config_cmake.sh

    - name: Build OFT
      shell: bash
      working-directory: libs/build_release
      run: make
    
    - name: Install OFT
      shell: bash
      working-directory: libs/build_release
      run: make install

    - name: Test OFT
      shell: bash
      timeout-minutes: 90
      working-directory: libs/build_release
      run: |
        source ${{ github.workspace }}/oft_venv/bin/activate
        make test
        mv tests/OFT.junit.xml OFT.junit.xml
    
    - name: Upload test results to Codecov
      if: ${{ !cancelled() && startsWith(matrix.os, 'ubuntu') }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
