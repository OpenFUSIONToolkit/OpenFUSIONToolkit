name: CD Build

on:
  push:
    branches:
      - main
      - cd_debug
  
jobs:
  build:
    name: ${{ format('Nightly ({0})', matrix.config.name) }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 30
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      FC: ${{ matrix.config.fc }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Linux-x86_64",
            os: ubuntu-22.04,
            cc: "gcc-12",cxx: "g++-12", fc: "gfortran-12",
            python: "python3",
            build_libs_flags: "--build_umfpack=1 --oblas_dynamic_arch"
          }
        - {
            name: "Linux-x86_64-Intel",
            os: ubuntu-22.04,
            cc: "icx",cxx: "icx", fc: "ifx",
            python: "python3",
            build_libs_flags: "--use_mkl --mkl_root=$MKLROOT"
          }
        - {
            name: "macOS-x86_64",
            os: macos-13,
            cc: "gcc-12", cxx: "g++-12", fc: "gfortran-12",
            python: "python3.12",
            xcode_path: "/Applications/Xcode_14.2.app/Contents/Developer",
            build_libs_flags: "--build_umfpack=1"
          }
        - {
            name: "macOS-x86_64-Rosetta",
            os: macos-13,
            cc: "gcc-12", cxx: "g++-12", fc: "gfortran-12",
            python: "python3.12",
            xcode_path: "/Applications/Xcode_14.2.app/Contents/Developer",
            build_libs_flags: "--build_umfpack=1 --oblas_no_avx"
          }
        - {
            name: "macOS-arm64",
            os: macos-14,
            cc: "gcc-13", cxx: "g++-13", fc: "gfortran-13",
            python: "python3.12",
            xcode_path: "/Applications/Xcode_15.4.app/Contents/Developer",
            build_libs_flags: "--build_umfpack=1"
        }

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Cache external libraries
      id: cache-ext-libs
      uses: actions/cache@v4
      with:
        path: libs
        key: ${{ matrix.config.os }}-nightly-${{ hashFiles('src/utilities/build_libs.py') }}

    - name: Get OS version (Linux)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: lsb_release -d

    - name: Get OS version (macOS)
      if: startsWith(matrix.config.os, 'macos')
      run: |
        sw_vers -productVersion
        pkgutil --pkg-info=com.apple.pkg.CLTools_Executables
        sudo xcode-select -s ${{ matrix.config.xcode_path }}
        xcode-select -p
    
    - name: Install prerequisites (Linux)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        sudo apt-get -y install doxygen graphviz
        ${{ matrix.config.python }} -m venv ${{ github.workspace }}/oft_venv
        echo "source ${{ github.workspace }}/oft_venv/bin/activate" > ${{ github.workspace }}/setup_env.sh
        source ${{ github.workspace }}/setup_env.sh
        python -m pip install jupyter nbconvert
    
    - name: Install prerequisites (macOS)
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install doxygen graphviz
        ${{ matrix.config.python }} -m venv ${{ github.workspace }}/oft_venv
        echo "source ${{ github.workspace }}/oft_venv/bin/activate" > ${{ github.workspace }}/setup_env.sh
        source ${{ github.workspace }}/setup_env.sh
        python -m pip install jupyter nbconvert
    
    - name: Install Intel oneAPI
      if: ${{ matrix.config.cc == 'icx' }}
      run: |
        sudo apt-get install -y gpg-agent wget
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/oneAPI.list" -o APT::Get::List-Cleanup="0"
        sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp intel-oneapi-compiler-fortran intel-oneapi-mkl-devel
        echo "source /opt/intel/oneapi/compiler/latest/env/vars.sh" >> ${{ github.workspace }}/setup_env.sh
        echo "source /opt/intel/oneapi/mkl/latest/env/vars.sh" >> ${{ github.workspace }}/setup_env.sh
        echo "ulimit -s unlimited" >> ${{ github.workspace }}/setup_env.sh

    - name: Check compilers
      run: |
        source ${{ github.workspace }}/setup_env.sh
        $CC --version
        $CXX --version
        $FC --version

    - name: Create build dir
      if: ${{ steps.cache-ext-libs.outputs.cache-hit != 'true' }}
      run: mkdir libs

    - name: Build external
      shell: bash
      working-directory: libs
      run: |
        source ${{ github.workspace }}/setup_env.sh
        python ../src/utilities/build_libs.py --no_dl_progress --nthread=2 --build_arpack=1 --oft_package --oft_build_docs=1 ${{ matrix.config.build_libs_flags }}

    - name: Upload library failure log
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: Library failure log
        path: libs/build/build_error.log
    
    - name: Remove external build directory
      shell: bash
      working-directory: libs
      run: rm -rf build

    - name: Configure OFT
      shell: bash
      working-directory: libs
      run: |
        source ${{ github.workspace }}/setup_env.sh
        bash config_cmake.sh

    - name: Build OFT
      shell: bash
      working-directory: libs/build_release
      run: |
        source ${{ github.workspace }}/setup_env.sh
        make
    
    - name: Install OFT
      shell: bash
      working-directory: libs/build_release
      run: |
        source ${{ github.workspace }}/setup_env.sh
        make install

    - name: Package OFT
      shell: bash
      working-directory: libs/build_release
      run: |
        source ${{ github.workspace }}/setup_env.sh
        make package
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.config.name }}-${{ github.sha }}
        path: libs/build_release/OpenFUSIONToolkit_*
        overwrite: true
